@page "/MOHTimeLine"
@using System.Globalization 
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div id='myMap'>
                <div class="container @StartButtonClass">
                    <div class="row justify-content-center">
                        <div class="col-sm-12 col-md-6">
                            <div class="d-flex justify-content-center" style="text-align: justify;">                                
                                The data about to be shown on the map may not be accurate, and should not be used as the basis of your
                                decisions or actions. Use official and verifiable sources of information before coming to your conclusions.
                                <br />
                                <br />This map has been made for demonstration purposes only.                                
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="d-flex justify-content-center py-2">
                                <button class="btn btn-success" @onclick="(async() => await LoadBingMapsJs())">I Agree</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row @ControlsClass">
        <div class="col-md-12">
            <div class="form-group d-flex  justify-content-center py-2">
                <span class="px-2 @(HideOnMinDateClass())">
                    <button class="btn btn-success" title="@("Min :" + MinDateTime.Date.ToString("dd/MMM/yyyy"))"
                            @onclick="(async() => await DecrementDate())">
                        <span class="ButtonText">← Prev</span>
                        <span class="ButtonTextMobile">←</span>
                    </button>
                </span>
                <span class="font-weight-bold">
                    <span>
                        <RadzenDatePicker @bind-Value=@CurrentDateTime DateFormat="dd MMM yyyy"
                                          DateRender=@DateRender  
                                          Change=@(async args => await OnChange(args, "DatePicker", "MM/dd/yyyy")) />
                    </span>                    
                </span>
                <span class="px-2 @(HideOnMaxDateClass())">
                    <button id="nextButton" class="btn btn-success" title="@("Max :" + MaxDateTime.Date.ToString("dd/MMM/yyyy"))"
                            @onclick="(async() => await IncrementDate())">
                        <span class="ButtonText">→ Next</span>
                        <span class="ButtonTextMobile">→</span>
                    </button>
                </span>
            </div>
        </div>
    </div> 
    <div class="row">
        <div class="col-md-12">
            @if (IsAccepted)
            {
                @if (SelectedVisits.Count > 0)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="d-none d-sm-table-cell" scope="col">#</th>
                                <th scope="col">Time</th>
                                <th scope="col">Location (Address)</th>
                                <th class="d-none d-sm-table-cell" scope="col">Posted On<sup>*</sup></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < SelectedVisits.Count; i++)
                            {
                                int idx = i;
                                var item = SelectedVisits[idx];
                                <tr>
                                    <th class="d-none d-sm-table-cell" scope="row">@(idx + 1)</th>
                                    <td>@(item.Time)</td>
                                    <td>
                                        @(((MarkupString)(item.LocationFormatted)))
                                    </td>
                                    <td class="d-none d-sm-table-cell">
                                        <a href="@(item.ArticleUrl)">
                                            @(item.SourcedOn.Replace("_", "/"))
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="d-none d-sm-block" style="text-align: justify;">
                        <sup>
                            <i>
                                * - "Posted On" means this data was extracted from a Press Release created on this date.
                                There may be more than one Press Release with the same data.
                            </i>
                        </sup>
                    </div>
                }
                else
                {
                    <div style="text-align: center;">
                        <sup>
                            <i>
                                No Data
                            </i>
                        </sup>
                    </div>
                }

                <div class="py-3" style="text-align: justify;">
                    <sup>
                        This is based on data extracted from the MOH's Daily Press Release between
                        <a href="https://www.moh.gov.sg/news-highlights/details/862-more-cases-discharged-344-new-cases-of-covid-19-infection-confirmed">25th May, 2020</a>
                        and <a href="https://www.moh.gov.sg/news-highlights/details/4-new-cases-of-locally-transmitted-covid-19-infection-28-jun-2021-update">28th June, 2021</a>.
                        During this time period the Annex "Public Places Visited by Cases in the Community during Infectious Period" was published as Pdf files which can be downloaded by clicking the Annex links inside the MOH's daily Press Releases.
                        To allow for verification of the data here, the link to the MOH's announcement where the data was originally extracted from has been provided in the "Posted On" column (If you can't see this column, try viewing this page on a bigger/wider screen).
                        GPS coordinates have been extracted using Singapore Government's <a href="https://www.onemap.gov.sg/main/v2/">OneMap</a> APIs.
                    </sup>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private string BingMapsKey = "AtYQNPq-ZbH4AbJChu2jypAc8spO1cgsmZ-OviyjVFcOXVF22WuIvz3pTzE6DFHU";
    private string MOHMapTimelineJSUrl = "./js/MOHMapTimeline.js";
    private string ProcessedJsonURL = "https://content.roman015.com/moh-timeline/TotalAnnouncements.json";

    private string StartButtonClass = "";
    private string ControlsClass = "d-none";
    private bool IsAccepted = false;

    IJSObjectReference jsMOHMapTimelineModule;

    DateTime MinDateTime = DateTime.Today;
    DateTime MaxDateTime = DateTime.Today;
    DateTime CurrentDateTime = DateTime.Today;

    List<VisitedSite> visitedSites = new List<VisitedSite>();
    List<VisitedSite> SelectedVisits = new List<VisitedSite>();

    // pin mark by KP Arts from the Noun Project

    private string HideOnMinDateClass()
    {
        return CurrentDateTime  == MinDateTime ? "hidden" : string.Empty;
    }

    private string HideOnMaxDateClass()
    {
        return CurrentDateTime == MaxDateTime ? "hidden" : string.Empty;
    }

    private async Task LoadBingMapsJs()
    {
        IsAccepted = true;
        StartButtonClass += " d-none";
        ControlsClass = string.Empty;

        jsMOHMapTimelineModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", MOHMapTimelineJSUrl);

        await jsMOHMapTimelineModule.InvokeVoidAsync("loadMap", BingMapsKey);

        var val = await Http.GetFromJsonAsync<List<VisitedSite>>(ProcessedJsonURL);

        visitedSites = val
                        .OrderByDescending(item => item.PeriodStart)
                        .ToList();

        MinDateTime = visitedSites.Last().Date.Date;
        MaxDateTime = visitedSites.First().Date.Date;
        CurrentDateTime = MaxDateTime;

        await LoadPinsFor(CurrentDateTime);
    }

    private async Task IncrementDate()
    {
        CurrentDateTime = CurrentDateTime.AddDays(1);
        if (CurrentDateTime.Date >= MaxDateTime.Date)
        {
            CurrentDateTime = MaxDateTime;
        }

        await RemoveAllPins();
        await LoadPinsFor(CurrentDateTime);
    }

    private async Task DecrementDate()
    {
        CurrentDateTime = CurrentDateTime.AddDays(-1);
        if (CurrentDateTime.Date <= MinDateTime.Date)
        {
            CurrentDateTime = MinDateTime;
        }

        await RemoveAllPins();
        await LoadPinsFor(CurrentDateTime);
    }

    private void DateRender(DateRenderEventArgs args)
    {
        args.Disabled = !(MinDateTime.Date <= args.Date.Date && args.Date.Date <= MaxDateTime.Date);
    }

    private async Task OnChange(DateTime? value, string name, string format)
    {
        CurrentDateTime = value.Value;
        if (CurrentDateTime.Date <= MinDateTime.Date)
        {
            CurrentDateTime = MinDateTime;
        }

        if (CurrentDateTime.Date >= MaxDateTime.Date)
        {
            CurrentDateTime = MaxDateTime;
        }

        await RemoveAllPins();
        await LoadPinsFor(CurrentDateTime);
    }

    private async Task LoadPinsFor(DateTime selectedDateTime)
    {
        SelectedVisits = visitedSites
            .Where(item => item.Date.Date == selectedDateTime.Date)
            .OrderBy(item => item.PeriodStart)
            .ToList();

        Console.WriteLine("Adding " + SelectedVisits.Count + " pins");

        foreach(var visit in SelectedVisits)
        {
            await jsMOHMapTimelineModule.InvokeVoidAsync(
                "pushPin",
                new Pin(visit));
        }
    }

    private async Task RemoveAllPins()
    {
        await jsMOHMapTimelineModule.InvokeVoidAsync("removeAllPins");
    }

    public class VisitedSite
    {
        public DateTime Date { get; set; }
        public string Time { get; set; }
        public string Location { get; set; }
        public string Address { get; set; }
        public DateTime PeriodStart { get; set; }
        public DateTime PeriodEnd { get; set; }
        public string PdfUrl { get; set; }
        public string SourcedOn { get; set; }
        public string ArticleUrl { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }

        public string LocationFormatted => Location
                .Replace("\r", "")
                .Replace("•", "<br/>&nbsp;&nbsp;•&nbsp;");
    }

    public class Pin : VisitedSite
    {
        //public double Latitude { get; set; }
        //public double Longitude { get; set; }
        public string Color { get; set; }
        public string Title { get; set; }
        public string Subtitle { get; set; }

        public Pin(VisitedSite site)
        {
            Date = site.Date;
            Time = site.Time;
            Location = site.Location;
            Address = site.Address;
            PeriodStart = site.PeriodStart;
            PeriodEnd = site.PeriodEnd;
            PdfUrl = "https://www.moh.gov.sg" + site.PdfUrl;
            SourcedOn = site.SourcedOn;
            ArticleUrl = site.ArticleUrl;
            Latitude = site.Latitude;
            Longitude = site.Longitude;

            Color = "red";
            Title = site.Address;
            Subtitle = site.Time;
        }
    }
}
